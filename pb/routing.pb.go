// Code generated by protoc-gen-gogo.
// source: github.com/evanphx/mesh/pb/routing.proto
// DO NOT EDIT!

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import github_com_evanphx_mesh "github.com/evanphx/mesh"

import bytes "bytes"

import strings "strings"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import sort "sort"
import strconv "strconv"
import reflect "reflect"

import (
	context "context"
	grpc "github.com/evanphx/mesh/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RouteRequest struct {
	Since int64 `protobuf:"varint,1,opt,name=since,proto3" json:"since,omitempty"`
}

func (m *RouteRequest) Reset()                    { *m = RouteRequest{} }
func (*RouteRequest) ProtoMessage()               {}
func (*RouteRequest) Descriptor() ([]byte, []int) { return fileDescriptorRouting, []int{0} }

type Route struct {
	Destination github_com_evanphx_mesh.Identity `protobuf:"bytes,1,opt,name=destination,proto3,casttype=github.com/evanphx/mesh.Identity" json:"destination,omitempty"`
	Weight      int32                            `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
	Prune       bool                             `protobuf:"varint,3,opt,name=prune,proto3" json:"prune,omitempty"`
}

func (m *Route) Reset()                    { *m = Route{} }
func (*Route) ProtoMessage()               {}
func (*Route) Descriptor() ([]byte, []int) { return fileDescriptorRouting, []int{1} }

type RouteUpdate struct {
	Neighbor github_com_evanphx_mesh.Identity `protobuf:"bytes,1,opt,name=neighbor,proto3,casttype=github.com/evanphx/mesh.Identity" json:"neighbor,omitempty"`
	Routes   []*Route                         `protobuf:"bytes,2,rep,name=routes" json:"routes,omitempty"`
}

func (m *RouteUpdate) Reset()                    { *m = RouteUpdate{} }
func (*RouteUpdate) ProtoMessage()               {}
func (*RouteUpdate) Descriptor() ([]byte, []int) { return fileDescriptorRouting, []int{2} }

func (m *RouteUpdate) GetRoutes() []*Route {
	if m != nil {
		return m.Routes
	}
	return nil
}

type NoResponse struct {
}

func (m *NoResponse) Reset()                    { *m = NoResponse{} }
func (*NoResponse) ProtoMessage()               {}
func (*NoResponse) Descriptor() ([]byte, []int) { return fileDescriptorRouting, []int{3} }

func init() {
	proto.RegisterType((*RouteRequest)(nil), "pb.RouteRequest")
	proto.RegisterType((*Route)(nil), "pb.Route")
	proto.RegisterType((*RouteUpdate)(nil), "pb.RouteUpdate")
	proto.RegisterType((*NoResponse)(nil), "pb.NoResponse")
}
func (this *RouteRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RouteRequest)
	if !ok {
		that2, ok := that.(RouteRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Since != that1.Since {
		return false
	}
	return true
}
func (this *Route) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Route)
	if !ok {
		that2, ok := that.(Route)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Destination, that1.Destination) {
		return false
	}
	if this.Weight != that1.Weight {
		return false
	}
	if this.Prune != that1.Prune {
		return false
	}
	return true
}
func (this *RouteUpdate) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RouteUpdate)
	if !ok {
		that2, ok := that.(RouteUpdate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Neighbor, that1.Neighbor) {
		return false
	}
	if len(this.Routes) != len(that1.Routes) {
		return false
	}
	for i := range this.Routes {
		if !this.Routes[i].Equal(that1.Routes[i]) {
			return false
		}
	}
	return true
}
func (this *NoResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*NoResponse)
	if !ok {
		that2, ok := that.(NoResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *RouteRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.RouteRequest{")
	s = append(s, "Since: "+fmt.Sprintf("%#v", this.Since)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Route) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.Route{")
	s = append(s, "Destination: "+fmt.Sprintf("%#v", this.Destination)+",\n")
	s = append(s, "Weight: "+fmt.Sprintf("%#v", this.Weight)+",\n")
	s = append(s, "Prune: "+fmt.Sprintf("%#v", this.Prune)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RouteUpdate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.RouteUpdate{")
	s = append(s, "Neighbor: "+fmt.Sprintf("%#v", this.Neighbor)+",\n")
	if this.Routes != nil {
		s = append(s, "Routes: "+fmt.Sprintf("%#v", this.Routes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NoResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.NoResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringRouting(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringRouting(m github_com_gogo_protobuf_proto.Message) string {
	e := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(m)
	if e == nil {
		return "nil"
	}
	s := "proto.NewUnsafeXXX_InternalExtensions(map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "})"
	return s
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Router service

type RouterClient interface {
	RoutesSince(ctx context.Context, in *RouteRequest, opts ...grpc.CallOption) (*RouteUpdate, error)
	NewRoute(ctx context.Context, in *RouteUpdate, opts ...grpc.CallOption) (*NoResponse, error)
}

type routerClient struct {
	cc *grpc.ClientConn
}

func NewRouterClient(cc *grpc.ClientConn) RouterClient {
	return &routerClient{cc}
}

func (c *routerClient) RoutesSince(ctx context.Context, in *RouteRequest, opts ...grpc.CallOption) (*RouteUpdate, error) {
	out := new(RouteUpdate)
	err := grpc.Invoke(ctx, "/pb.Router/RoutesSince", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) NewRoute(ctx context.Context, in *RouteUpdate, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := grpc.Invoke(ctx, "/pb.Router/NewRoute", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Router service

type RouterServer interface {
	RoutesSince(context.Context, *RouteRequest) (*RouteUpdate, error)
	NewRoute(context.Context, *RouteUpdate) (*NoResponse, error)
}

func RegisterRouterServer(s grpc.ServiceRegistry, srv RouterServer) {
	s.RegisterService(&_Router_serviceDesc, srv)
}

func _Router_RoutesSince_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).RoutesSince(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Router/RoutesSince",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).RoutesSince(ctx, req.(*RouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Router_NewRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).NewRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Router/NewRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).NewRoute(ctx, req.(*RouteUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

var _Router_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Router",
	HandlerType: (*RouterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RoutesSince",
			Handler:    _Router_RoutesSince_Handler,
		},
		{
			MethodName: "NewRoute",
			Handler:    _Router_NewRoute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/evanphx/mesh/pb/routing.proto",
}

func (m *RouteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Since != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRouting(dAtA, i, uint64(m.Since))
	}
	return i, nil
}

func (m *Route) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Route) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Destination) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRouting(dAtA, i, uint64(len(m.Destination)))
		i += copy(dAtA[i:], m.Destination)
	}
	if m.Weight != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRouting(dAtA, i, uint64(m.Weight))
	}
	if m.Prune {
		dAtA[i] = 0x18
		i++
		if m.Prune {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *RouteUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouteUpdate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Neighbor) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRouting(dAtA, i, uint64(len(m.Neighbor)))
		i += copy(dAtA[i:], m.Neighbor)
	}
	if len(m.Routes) > 0 {
		for _, msg := range m.Routes {
			dAtA[i] = 0x12
			i++
			i = encodeVarintRouting(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *NoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeFixed64Routing(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Routing(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintRouting(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RouteRequest) Size() (n int) {
	var l int
	_ = l
	if m.Since != 0 {
		n += 1 + sovRouting(uint64(m.Since))
	}
	return n
}

func (m *Route) Size() (n int) {
	var l int
	_ = l
	l = len(m.Destination)
	if l > 0 {
		n += 1 + l + sovRouting(uint64(l))
	}
	if m.Weight != 0 {
		n += 1 + sovRouting(uint64(m.Weight))
	}
	if m.Prune {
		n += 2
	}
	return n
}

func (m *RouteUpdate) Size() (n int) {
	var l int
	_ = l
	l = len(m.Neighbor)
	if l > 0 {
		n += 1 + l + sovRouting(uint64(l))
	}
	if len(m.Routes) > 0 {
		for _, e := range m.Routes {
			l = e.Size()
			n += 1 + l + sovRouting(uint64(l))
		}
	}
	return n
}

func (m *NoResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovRouting(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRouting(x uint64) (n int) {
	return sovRouting(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RouteRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteRequest{`,
		`Since:` + fmt.Sprintf("%v", this.Since) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Route) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Route{`,
		`Destination:` + fmt.Sprintf("%v", this.Destination) + `,`,
		`Weight:` + fmt.Sprintf("%v", this.Weight) + `,`,
		`Prune:` + fmt.Sprintf("%v", this.Prune) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteUpdate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteUpdate{`,
		`Neighbor:` + fmt.Sprintf("%v", this.Neighbor) + `,`,
		`Routes:` + strings.Replace(fmt.Sprintf("%v", this.Routes), "Route", "Route", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NoResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NoResponse{`,
		`}`,
	}, "")
	return s
}
func valueToStringRouting(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RouteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RouteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RouteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Since", wireType)
			}
			m.Since = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Since |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRouting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Route) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Route: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Route: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destination", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRouting
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Destination = append(m.Destination[:0], dAtA[iNdEx:postIndex]...)
			if m.Destination == nil {
				m.Destination = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prune", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Prune = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRouting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RouteUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RouteUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RouteUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Neighbor", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRouting
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Neighbor = append(m.Neighbor[:0], dAtA[iNdEx:postIndex]...)
			if m.Neighbor == nil {
				m.Neighbor = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouting
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Routes = append(m.Routes, &Route{})
			if err := m.Routes[len(m.Routes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRouting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRouting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRouting(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRouting
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRouting
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRouting
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRouting(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRouting = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRouting   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("github.com/evanphx/mesh/pb/routing.proto", fileDescriptorRouting) }

var fileDescriptorRouting = []byte{
	// 359 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x51, 0x31, 0x4b, 0xc3, 0x40,
	0x18, 0xcd, 0xb5, 0x34, 0xd4, 0x6b, 0x51, 0x39, 0x44, 0x42, 0x87, 0x33, 0x86, 0x0e, 0x19, 0x6c,
	0x02, 0xf5, 0x0f, 0x48, 0x07, 0xc1, 0xa5, 0x43, 0xc4, 0x1f, 0xd0, 0xb4, 0x9f, 0x49, 0x90, 0xde,
	0x9d, 0xb9, 0x8b, 0xd5, 0x41, 0xf0, 0x27, 0xf8, 0x33, 0xfc, 0x29, 0x8e, 0x1d, 0x9d, 0xc4, 0xc6,
	0xc5, 0xb1, 0xb3, 0x93, 0xe4, 0xae, 0xb4, 0x45, 0x70, 0x70, 0xbb, 0xf7, 0xbd, 0xf7, 0x78, 0x8f,
	0x77, 0xd8, 0x4f, 0x32, 0x95, 0x16, 0x71, 0x30, 0xe6, 0xd3, 0x10, 0xee, 0x46, 0x4c, 0xa4, 0xf7,
	0xe1, 0x14, 0x64, 0x1a, 0x8a, 0x38, 0xcc, 0x79, 0xa1, 0x32, 0x96, 0x04, 0x22, 0xe7, 0x8a, 0x93,
	0x9a, 0x88, 0x3b, 0xbd, 0x2d, 0x75, 0xc2, 0x13, 0x1e, 0x6a, 0x2a, 0x2e, 0xae, 0x35, 0xd2, 0x40,
	0xbf, 0x8c, 0xc5, 0xeb, 0xe2, 0x76, 0xc4, 0x0b, 0x05, 0x11, 0xdc, 0x16, 0x20, 0x15, 0x39, 0xc0,
	0x0d, 0x99, 0xb1, 0x31, 0x38, 0xc8, 0x45, 0x7e, 0x3d, 0x32, 0xc0, 0x7b, 0xc4, 0x0d, 0xad, 0x22,
	0xe7, 0xb8, 0x35, 0x01, 0xa9, 0x32, 0x36, 0x52, 0x19, 0x67, 0x5a, 0xd4, 0x1e, 0x74, 0xbf, 0xdf,
	0x8f, 0xdc, 0x3f, 0x4a, 0x06, 0x17, 0x13, 0x60, 0x2a, 0x53, 0x0f, 0xd1, 0xb6, 0x91, 0x1c, 0x62,
	0x7b, 0x06, 0x59, 0x92, 0x2a, 0xa7, 0xe6, 0x22, 0xbf, 0x11, 0xad, 0x50, 0x15, 0x2f, 0xf2, 0x82,
	0x81, 0x53, 0x77, 0x91, 0xdf, 0x8c, 0x0c, 0xf0, 0x72, 0xdc, 0xd2, 0xf1, 0x57, 0x62, 0x32, 0x52,
	0x40, 0xce, 0x70, 0x93, 0x55, 0xf2, 0x98, 0xe7, 0xff, 0x6a, 0xb0, 0x76, 0x91, 0x63, 0x6c, 0x57,
	0xcb, 0x81, 0x74, 0x6a, 0x6e, 0xdd, 0x6f, 0xf5, 0x77, 0x02, 0x11, 0x07, 0x66, 0x87, 0x15, 0xe1,
	0xb5, 0x31, 0x1e, 0xf2, 0x08, 0xa4, 0xe0, 0x4c, 0x42, 0xff, 0x06, 0xdb, 0x9a, 0xce, 0x49, 0x7f,
	0xd5, 0x45, 0x5e, 0x56, 0xcb, 0x90, 0xfd, 0x8d, 0xd3, 0x2c, 0xd8, 0xd9, 0x5b, 0x5f, 0x4c, 0x5d,
	0xcf, 0x22, 0x3d, 0xdc, 0x1c, 0xc2, 0xcc, 0x2c, 0xf8, 0x9b, 0xee, 0xec, 0x56, 0x87, 0x4d, 0x94,
	0x67, 0x0d, 0x4e, 0xe6, 0x0b, 0x6a, 0xbd, 0x2d, 0xa8, 0xb5, 0x5c, 0x50, 0xf4, 0x54, 0x52, 0xf4,
	0x52, 0x52, 0xf4, 0x5a, 0x52, 0x34, 0x2f, 0x29, 0xfa, 0x28, 0x29, 0xfa, 0x2a, 0xa9, 0xb5, 0x2c,
	0x29, 0x7a, 0xfe, 0xa4, 0x56, 0x6c, 0xeb, 0x8f, 0x3c, 0xfd, 0x09, 0x00, 0x00, 0xff, 0xff, 0xbb,
	0xb2, 0xa6, 0x89, 0x27, 0x02, 0x00, 0x00,
}
