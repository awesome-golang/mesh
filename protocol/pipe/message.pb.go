// Code generated by protoc-gen-gogo.
// source: github.com/evanphx/mesh/protocol/pipe/message.proto
// DO NOT EDIT!

/*
	Package pipe is a generated protocol buffer package.

	It is generated from these files:
		github.com/evanphx/mesh/protocol/pipe/message.proto

	It has these top-level messages:
		Message
*/
package pipe

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strconv "strconv"

import bytes "bytes"

import strings "strings"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import sort "sort"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Message_Type int32

const (
	PIPE_OPEN     Message_Type = 0
	PIPE_CLOSE    Message_Type = 1
	PIPE_DATA     Message_Type = 2
	PIPE_UNKNOWN  Message_Type = 3
	PIPE_OPENED   Message_Type = 4
	PIPE_DATA_ACK Message_Type = 5
)

var Message_Type_name = map[int32]string{
	0: "PIPE_OPEN",
	1: "PIPE_CLOSE",
	2: "PIPE_DATA",
	3: "PIPE_UNKNOWN",
	4: "PIPE_OPENED",
	5: "PIPE_DATA_ACK",
}
var Message_Type_value = map[string]int32{
	"PIPE_OPEN":     0,
	"PIPE_CLOSE":    1,
	"PIPE_DATA":     2,
	"PIPE_UNKNOWN":  3,
	"PIPE_OPENED":   4,
	"PIPE_DATA_ACK": 5,
}

func (Message_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptorMessage, []int{0, 0} }

type Message struct {
	Session   uint64       `protobuf:"varint,1,opt,name=session,proto3" json:"session,omitempty"`
	SeqId     uint64       `protobuf:"varint,2,opt,name=seq_id,json=seqId,proto3" json:"seq_id,omitempty"`
	AckId     uint64       `protobuf:"varint,3,opt,name=ack_id,json=ackId,proto3" json:"ack_id,omitempty"`
	Type      Message_Type `protobuf:"varint,4,opt,name=type,proto3,enum=pipe.Message_Type" json:"type,omitempty"`
	PipeName  string       `protobuf:"bytes,5,opt,name=pipe_name,json=pipeName,proto3" json:"pipe_name,omitempty"`
	Data      []byte       `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	Encrypted bool         `protobuf:"varint,7,opt,name=encrypted,proto3" json:"encrypted,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{0} }

func init() {
	proto.RegisterType((*Message)(nil), "pipe.Message")
	proto.RegisterEnum("pipe.Message_Type", Message_Type_name, Message_Type_value)
}
func (x Message_Type) String() string {
	s, ok := Message_Type_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Message) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Message)
	if !ok {
		that2, ok := that.(Message)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Session != that1.Session {
		return false
	}
	if this.SeqId != that1.SeqId {
		return false
	}
	if this.AckId != that1.AckId {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.PipeName != that1.PipeName {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	if this.Encrypted != that1.Encrypted {
		return false
	}
	return true
}
func (this *Message) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pipe.Message{")
	s = append(s, "Session: "+fmt.Sprintf("%#v", this.Session)+",\n")
	s = append(s, "SeqId: "+fmt.Sprintf("%#v", this.SeqId)+",\n")
	s = append(s, "AckId: "+fmt.Sprintf("%#v", this.AckId)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "PipeName: "+fmt.Sprintf("%#v", this.PipeName)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "Encrypted: "+fmt.Sprintf("%#v", this.Encrypted)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMessage(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringMessage(m github_com_gogo_protobuf_proto.Message) string {
	e := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(m)
	if e == nil {
		return "nil"
	}
	s := "proto.NewUnsafeXXX_InternalExtensions(map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "})"
	return s
}
func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Session != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.Session))
	}
	if m.SeqId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.SeqId))
	}
	if m.AckId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.AckId))
	}
	if m.Type != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.Type))
	}
	if len(m.PipeName) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.PipeName)))
		i += copy(dAtA[i:], m.PipeName)
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if m.Encrypted {
		dAtA[i] = 0x38
		i++
		if m.Encrypted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeFixed64Message(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Message(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Message) Size() (n int) {
	var l int
	_ = l
	if m.Session != 0 {
		n += 1 + sovMessage(uint64(m.Session))
	}
	if m.SeqId != 0 {
		n += 1 + sovMessage(uint64(m.SeqId))
	}
	if m.AckId != 0 {
		n += 1 + sovMessage(uint64(m.AckId))
	}
	if m.Type != 0 {
		n += 1 + sovMessage(uint64(m.Type))
	}
	l = len(m.PipeName)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Encrypted {
		n += 2
	}
	return n
}

func sovMessage(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Message) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Message{`,
		`Session:` + fmt.Sprintf("%v", this.Session) + `,`,
		`SeqId:` + fmt.Sprintf("%v", this.SeqId) + `,`,
		`AckId:` + fmt.Sprintf("%v", this.AckId) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`PipeName:` + fmt.Sprintf("%v", this.PipeName) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`Encrypted:` + fmt.Sprintf("%v", this.Encrypted) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMessage(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Session", wireType)
			}
			m.Session = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Session |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeqId", wireType)
			}
			m.SeqId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeqId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckId", wireType)
			}
			m.AckId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (Message_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PipeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PipeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encrypted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Encrypted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMessage(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMessage = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/evanphx/mesh/protocol/pipe/message.proto", fileDescriptorMessage)
}

var fileDescriptorMessage = []byte{
	// 375 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xcd, 0x4e, 0xea, 0x40,
	0x18, 0x86, 0x3b, 0x50, 0x7e, 0x3a, 0x07, 0x38, 0x3d, 0x93, 0x9c, 0xa4, 0x39, 0xe7, 0x64, 0xd2,
	0xb0, 0x38, 0xe9, 0x42, 0xdb, 0x44, 0xae, 0x00, 0xa1, 0x0b, 0x82, 0x16, 0x52, 0x31, 0x2e, 0x9b,
	0xa1, 0x1d, 0x4b, 0xc5, 0xfe, 0x40, 0x8b, 0x91, 0x9d, 0x97, 0xe0, 0x65, 0x78, 0x01, 0x5e, 0x84,
	0x4b, 0x96, 0x2e, 0xa5, 0x6e, 0x5c, 0x72, 0x09, 0x66, 0xa6, 0x8a, 0xee, 0xbe, 0xf7, 0x79, 0xf3,
	0x7c, 0x33, 0xf9, 0x60, 0xc7, 0x0f, 0xb2, 0xd9, 0x6a, 0xaa, 0xbb, 0x71, 0x68, 0xd0, 0x1b, 0x12,
	0x25, 0xb3, 0x5b, 0x23, 0xa4, 0xe9, 0xcc, 0x48, 0x96, 0x71, 0x16, 0xbb, 0xf1, 0xb5, 0x91, 0x04,
	0x09, 0x65, 0x28, 0x25, 0x3e, 0xd5, 0x39, 0x45, 0x22, 0x63, 0x7f, 0x0e, 0xbf, 0xa9, 0x7e, 0xec,
	0xc7, 0x85, 0x32, 0x5d, 0x5d, 0xf2, 0xc4, 0x03, 0x9f, 0x0a, 0xa9, 0xfd, 0x58, 0x82, 0xb5, 0xd3,
	0x62, 0x0d, 0x52, 0x60, 0x2d, 0xa5, 0x69, 0x1a, 0xc4, 0x91, 0x02, 0x54, 0xa0, 0x89, 0xf6, 0x67,
	0x44, 0xbf, 0x61, 0x35, 0xa5, 0x0b, 0x27, 0xf0, 0x94, 0x12, 0x2f, 0x2a, 0x29, 0x5d, 0x0c, 0x3c,
	0x86, 0x89, 0x3b, 0x67, 0xb8, 0x5c, 0x60, 0xe2, 0xce, 0x07, 0x1e, 0xfa, 0x0f, 0xc5, 0x6c, 0x9d,
	0x50, 0x45, 0x54, 0x81, 0xd6, 0x3a, 0x42, 0x3a, 0xfb, 0x97, 0xfe, 0xf1, 0x88, 0x3e, 0x59, 0x27,
	0xd4, 0xe6, 0x3d, 0xfa, 0x0b, 0x25, 0x56, 0x39, 0x11, 0x09, 0xa9, 0x52, 0x51, 0x81, 0x26, 0xd9,
	0x75, 0x06, 0x2c, 0x12, 0x52, 0x84, 0xa0, 0xe8, 0x91, 0x8c, 0x28, 0x55, 0x15, 0x68, 0x0d, 0x9b,
	0xcf, 0xe8, 0x1f, 0x94, 0x68, 0xe4, 0x2e, 0xd7, 0x49, 0x46, 0x3d, 0xa5, 0xa6, 0x02, 0xad, 0x6e,
	0x7f, 0x81, 0xf6, 0x15, 0x14, 0xd9, 0x72, 0xd4, 0x84, 0xd2, 0x78, 0x30, 0x36, 0x9d, 0xd1, 0xd8,
	0xb4, 0x64, 0x01, 0xb5, 0x20, 0xe4, 0xb1, 0x77, 0x32, 0x3a, 0x33, 0x65, 0xb0, 0xaf, 0xfb, 0xdd,
	0x49, 0x57, 0x2e, 0x21, 0x19, 0x36, 0x78, 0x3c, 0xb7, 0x86, 0xd6, 0xe8, 0xc2, 0x92, 0xcb, 0xe8,
	0x27, 0xfc, 0xb1, 0xf7, 0xcd, 0xbe, 0x2c, 0xa2, 0x5f, 0xb0, 0xb9, 0x37, 0x9c, 0x6e, 0x6f, 0x28,
	0x57, 0x8e, 0x0f, 0x36, 0x5b, 0x2c, 0x3c, 0x6f, 0xb1, 0xb0, 0xdb, 0x62, 0x70, 0x97, 0x63, 0xf0,
	0x90, 0x63, 0xf0, 0x94, 0x63, 0xb0, 0xc9, 0x31, 0x78, 0xc9, 0x31, 0x78, 0xcb, 0xb1, 0xb0, 0xcb,
	0x31, 0xb8, 0x7f, 0xc5, 0xc2, 0xb4, 0xca, 0x6f, 0xdd, 0x79, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x64,
	0xb5, 0xc0, 0x20, 0xd7, 0x01, 0x00, 0x00,
}
