// Code generated by protoc-gen-gogo.
// source: github.com/evanphx/mesh/peer/adver.proto
// DO NOT EDIT!

/*
	Package peer is a generated protocol buffer package.

	It is generated from these files:
		github.com/evanphx/mesh/peer/adver.proto
		github.com/evanphx/mesh/peer/message.proto
		github.com/evanphx/mesh/peer/routing.proto

	It has these top-level messages:
		Advertisement
		AdvertisementUpdate
		AdvertisementChanges
		RetrieveAdverRequest
		AdvertisementSet
		Header
		RouteRequest
		Route
		RouteUpdate
		NoResponse
*/
package peer

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import bytes "bytes"

import strings "strings"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import sort "sort"
import strconv "strconv"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import (
	context "context"
	grpc "github.com/evanphx/mesh/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Advertisement struct {
	Id        string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Owner     Identity          `protobuf:"bytes,2,opt,name=owner,proto3,casttype=Identity" json:"owner,omitempty"`
	Pipe      string            `protobuf:"bytes,3,opt,name=pipe,proto3" json:"pipe,omitempty"`
	Tags      map[string]string `protobuf:"bytes,4,rep,name=tags" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Resources map[string]string `protobuf:"bytes,5,rep,name=resources" json:"resources,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Advertisement) Reset()                    { *m = Advertisement{} }
func (*Advertisement) ProtoMessage()               {}
func (*Advertisement) Descriptor() ([]byte, []int) { return fileDescriptorAdver, []int{0} }

func (m *Advertisement) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Advertisement) GetResources() map[string]string {
	if m != nil {
		return m.Resources
	}
	return nil
}

type AdvertisementUpdate struct {
	NewAdvers    []*Advertisement `protobuf:"bytes,1,rep,name=new_advers,json=newAdvers" json:"new_advers,omitempty"`
	RemoveAdvers []string         `protobuf:"bytes,2,rep,name=remove_advers,json=removeAdvers" json:"remove_advers,omitempty"`
}

func (m *AdvertisementUpdate) Reset()                    { *m = AdvertisementUpdate{} }
func (*AdvertisementUpdate) ProtoMessage()               {}
func (*AdvertisementUpdate) Descriptor() ([]byte, []int) { return fileDescriptorAdver, []int{1} }

func (m *AdvertisementUpdate) GetNewAdvers() []*Advertisement {
	if m != nil {
		return m.NewAdvers
	}
	return nil
}

type AdvertisementChanges struct {
	Changes int32 `protobuf:"varint,1,opt,name=changes,proto3" json:"changes,omitempty"`
}

func (m *AdvertisementChanges) Reset()                    { *m = AdvertisementChanges{} }
func (*AdvertisementChanges) ProtoMessage()               {}
func (*AdvertisementChanges) Descriptor() ([]byte, []int) { return fileDescriptorAdver, []int{2} }

type RetrieveAdverRequest struct {
}

func (m *RetrieveAdverRequest) Reset()                    { *m = RetrieveAdverRequest{} }
func (*RetrieveAdverRequest) ProtoMessage()               {}
func (*RetrieveAdverRequest) Descriptor() ([]byte, []int) { return fileDescriptorAdver, []int{3} }

type AdvertisementSet struct {
	Advers []*Advertisement `protobuf:"bytes,1,rep,name=advers" json:"advers,omitempty"`
}

func (m *AdvertisementSet) Reset()                    { *m = AdvertisementSet{} }
func (*AdvertisementSet) ProtoMessage()               {}
func (*AdvertisementSet) Descriptor() ([]byte, []int) { return fileDescriptorAdver, []int{4} }

func (m *AdvertisementSet) GetAdvers() []*Advertisement {
	if m != nil {
		return m.Advers
	}
	return nil
}

func init() {
	proto.RegisterType((*Advertisement)(nil), "peer.Advertisement")
	proto.RegisterType((*AdvertisementUpdate)(nil), "peer.AdvertisementUpdate")
	proto.RegisterType((*AdvertisementChanges)(nil), "peer.AdvertisementChanges")
	proto.RegisterType((*RetrieveAdverRequest)(nil), "peer.RetrieveAdverRequest")
	proto.RegisterType((*AdvertisementSet)(nil), "peer.AdvertisementSet")
}
func (this *Advertisement) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Advertisement)
	if !ok {
		that2, ok := that.(Advertisement)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if !bytes.Equal(this.Owner, that1.Owner) {
		return false
	}
	if this.Pipe != that1.Pipe {
		return false
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if this.Tags[i] != that1.Tags[i] {
			return false
		}
	}
	if len(this.Resources) != len(that1.Resources) {
		return false
	}
	for i := range this.Resources {
		if this.Resources[i] != that1.Resources[i] {
			return false
		}
	}
	return true
}
func (this *AdvertisementUpdate) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AdvertisementUpdate)
	if !ok {
		that2, ok := that.(AdvertisementUpdate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.NewAdvers) != len(that1.NewAdvers) {
		return false
	}
	for i := range this.NewAdvers {
		if !this.NewAdvers[i].Equal(that1.NewAdvers[i]) {
			return false
		}
	}
	if len(this.RemoveAdvers) != len(that1.RemoveAdvers) {
		return false
	}
	for i := range this.RemoveAdvers {
		if this.RemoveAdvers[i] != that1.RemoveAdvers[i] {
			return false
		}
	}
	return true
}
func (this *AdvertisementChanges) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AdvertisementChanges)
	if !ok {
		that2, ok := that.(AdvertisementChanges)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Changes != that1.Changes {
		return false
	}
	return true
}
func (this *RetrieveAdverRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RetrieveAdverRequest)
	if !ok {
		that2, ok := that.(RetrieveAdverRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *AdvertisementSet) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AdvertisementSet)
	if !ok {
		that2, ok := that.(AdvertisementSet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Advers) != len(that1.Advers) {
		return false
	}
	for i := range this.Advers {
		if !this.Advers[i].Equal(that1.Advers[i]) {
			return false
		}
	}
	return true
}
func (this *Advertisement) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&peer.Advertisement{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Owner: "+fmt.Sprintf("%#v", this.Owner)+",\n")
	s = append(s, "Pipe: "+fmt.Sprintf("%#v", this.Pipe)+",\n")
	keysForTags := make([]string, 0, len(this.Tags))
	for k, _ := range this.Tags {
		keysForTags = append(keysForTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
	mapStringForTags := "map[string]string{"
	for _, k := range keysForTags {
		mapStringForTags += fmt.Sprintf("%#v: %#v,", k, this.Tags[k])
	}
	mapStringForTags += "}"
	if this.Tags != nil {
		s = append(s, "Tags: "+mapStringForTags+",\n")
	}
	keysForResources := make([]string, 0, len(this.Resources))
	for k, _ := range this.Resources {
		keysForResources = append(keysForResources, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForResources)
	mapStringForResources := "map[string]string{"
	for _, k := range keysForResources {
		mapStringForResources += fmt.Sprintf("%#v: %#v,", k, this.Resources[k])
	}
	mapStringForResources += "}"
	if this.Resources != nil {
		s = append(s, "Resources: "+mapStringForResources+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AdvertisementUpdate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&peer.AdvertisementUpdate{")
	if this.NewAdvers != nil {
		s = append(s, "NewAdvers: "+fmt.Sprintf("%#v", this.NewAdvers)+",\n")
	}
	s = append(s, "RemoveAdvers: "+fmt.Sprintf("%#v", this.RemoveAdvers)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AdvertisementChanges) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&peer.AdvertisementChanges{")
	s = append(s, "Changes: "+fmt.Sprintf("%#v", this.Changes)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrieveAdverRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&peer.RetrieveAdverRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AdvertisementSet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&peer.AdvertisementSet{")
	if this.Advers != nil {
		s = append(s, "Advers: "+fmt.Sprintf("%#v", this.Advers)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringAdver(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringAdver(m github_com_gogo_protobuf_proto.Message) string {
	e := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(m)
	if e == nil {
		return "nil"
	}
	s := "proto.NewUnsafeXXX_InternalExtensions(map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "})"
	return s
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Services service

type ServicesClient interface {
	SyncAdvertisements(ctx context.Context, in *AdvertisementUpdate, opts ...grpc.CallOption) (*AdvertisementChanges, error)
	RetrieveAdvertisements(ctx context.Context, in *RetrieveAdverRequest, opts ...grpc.CallOption) (*AdvertisementSet, error)
}

type servicesClient struct {
	cc *grpc.ClientConn
}

func NewServicesClient(cc *grpc.ClientConn) ServicesClient {
	return &servicesClient{cc}
}

func (c *servicesClient) SyncAdvertisements(ctx context.Context, in *AdvertisementUpdate, opts ...grpc.CallOption) (*AdvertisementChanges, error) {
	out := new(AdvertisementChanges)
	err := grpc.Invoke(ctx, "/peer.Services/SyncAdvertisements", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesClient) RetrieveAdvertisements(ctx context.Context, in *RetrieveAdverRequest, opts ...grpc.CallOption) (*AdvertisementSet, error) {
	out := new(AdvertisementSet)
	err := grpc.Invoke(ctx, "/peer.Services/RetrieveAdvertisements", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Services service

type ServicesServer interface {
	SyncAdvertisements(context.Context, *AdvertisementUpdate) (*AdvertisementChanges, error)
	RetrieveAdvertisements(context.Context, *RetrieveAdverRequest) (*AdvertisementSet, error)
}

func RegisterServicesServer(s grpc.ServiceRegistry, srv ServicesServer) {
	s.RegisterService(&_Services_serviceDesc, srv)
}

func _Services_SyncAdvertisements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdvertisementUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServer).SyncAdvertisements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peer.Services/SyncAdvertisements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServer).SyncAdvertisements(ctx, req.(*AdvertisementUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Services_RetrieveAdvertisements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveAdverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServer).RetrieveAdvertisements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peer.Services/RetrieveAdvertisements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServer).RetrieveAdvertisements(ctx, req.(*RetrieveAdverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Services_serviceDesc = grpc.ServiceDesc{
	ServiceName: "peer.Services",
	HandlerType: (*ServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SyncAdvertisements",
			Handler:    _Services_SyncAdvertisements_Handler,
		},
		{
			MethodName: "RetrieveAdvertisements",
			Handler:    _Services_RetrieveAdvertisements_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/evanphx/mesh/peer/adver.proto",
}

func (m *Advertisement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Advertisement) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAdver(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Owner) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAdver(dAtA, i, uint64(len(m.Owner)))
		i += copy(dAtA[i:], m.Owner)
	}
	if len(m.Pipe) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAdver(dAtA, i, uint64(len(m.Pipe)))
		i += copy(dAtA[i:], m.Pipe)
	}
	if len(m.Tags) > 0 {
		for k, _ := range m.Tags {
			dAtA[i] = 0x22
			i++
			v := m.Tags[k]
			mapSize := 1 + len(k) + sovAdver(uint64(len(k))) + 1 + len(v) + sovAdver(uint64(len(v)))
			i = encodeVarintAdver(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintAdver(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintAdver(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.Resources) > 0 {
		for k, _ := range m.Resources {
			dAtA[i] = 0x2a
			i++
			v := m.Resources[k]
			mapSize := 1 + len(k) + sovAdver(uint64(len(k))) + 1 + len(v) + sovAdver(uint64(len(v)))
			i = encodeVarintAdver(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintAdver(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintAdver(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func (m *AdvertisementUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdvertisementUpdate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NewAdvers) > 0 {
		for _, msg := range m.NewAdvers {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAdver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RemoveAdvers) > 0 {
		for _, s := range m.RemoveAdvers {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *AdvertisementChanges) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdvertisementChanges) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Changes != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAdver(dAtA, i, uint64(m.Changes))
	}
	return i, nil
}

func (m *RetrieveAdverRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveAdverRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *AdvertisementSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdvertisementSet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Advers) > 0 {
		for _, msg := range m.Advers {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAdver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Adver(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Adver(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintAdver(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Advertisement) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovAdver(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovAdver(uint64(l))
	}
	l = len(m.Pipe)
	if l > 0 {
		n += 1 + l + sovAdver(uint64(l))
	}
	if len(m.Tags) > 0 {
		for k, v := range m.Tags {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovAdver(uint64(len(k))) + 1 + len(v) + sovAdver(uint64(len(v)))
			n += mapEntrySize + 1 + sovAdver(uint64(mapEntrySize))
		}
	}
	if len(m.Resources) > 0 {
		for k, v := range m.Resources {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovAdver(uint64(len(k))) + 1 + len(v) + sovAdver(uint64(len(v)))
			n += mapEntrySize + 1 + sovAdver(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *AdvertisementUpdate) Size() (n int) {
	var l int
	_ = l
	if len(m.NewAdvers) > 0 {
		for _, e := range m.NewAdvers {
			l = e.Size()
			n += 1 + l + sovAdver(uint64(l))
		}
	}
	if len(m.RemoveAdvers) > 0 {
		for _, s := range m.RemoveAdvers {
			l = len(s)
			n += 1 + l + sovAdver(uint64(l))
		}
	}
	return n
}

func (m *AdvertisementChanges) Size() (n int) {
	var l int
	_ = l
	if m.Changes != 0 {
		n += 1 + sovAdver(uint64(m.Changes))
	}
	return n
}

func (m *RetrieveAdverRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *AdvertisementSet) Size() (n int) {
	var l int
	_ = l
	if len(m.Advers) > 0 {
		for _, e := range m.Advers {
			l = e.Size()
			n += 1 + l + sovAdver(uint64(l))
		}
	}
	return n
}

func sovAdver(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAdver(x uint64) (n int) {
	return sovAdver(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Advertisement) String() string {
	if this == nil {
		return "nil"
	}
	keysForTags := make([]string, 0, len(this.Tags))
	for k, _ := range this.Tags {
		keysForTags = append(keysForTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
	mapStringForTags := "map[string]string{"
	for _, k := range keysForTags {
		mapStringForTags += fmt.Sprintf("%v: %v,", k, this.Tags[k])
	}
	mapStringForTags += "}"
	keysForResources := make([]string, 0, len(this.Resources))
	for k, _ := range this.Resources {
		keysForResources = append(keysForResources, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForResources)
	mapStringForResources := "map[string]string{"
	for _, k := range keysForResources {
		mapStringForResources += fmt.Sprintf("%v: %v,", k, this.Resources[k])
	}
	mapStringForResources += "}"
	s := strings.Join([]string{`&Advertisement{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Owner:` + fmt.Sprintf("%v", this.Owner) + `,`,
		`Pipe:` + fmt.Sprintf("%v", this.Pipe) + `,`,
		`Tags:` + mapStringForTags + `,`,
		`Resources:` + mapStringForResources + `,`,
		`}`,
	}, "")
	return s
}
func (this *AdvertisementUpdate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AdvertisementUpdate{`,
		`NewAdvers:` + strings.Replace(fmt.Sprintf("%v", this.NewAdvers), "Advertisement", "Advertisement", 1) + `,`,
		`RemoveAdvers:` + fmt.Sprintf("%v", this.RemoveAdvers) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AdvertisementChanges) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AdvertisementChanges{`,
		`Changes:` + fmt.Sprintf("%v", this.Changes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveAdverRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RetrieveAdverRequest{`,
		`}`,
	}, "")
	return s
}
func (this *AdvertisementSet) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AdvertisementSet{`,
		`Advers:` + strings.Replace(fmt.Sprintf("%v", this.Advers), "Advertisement", "Advertisement", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringAdver(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Advertisement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Advertisement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Advertisement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAdver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = append(m.Owner[:0], dAtA[iNdEx:postIndex]...)
			if m.Owner == nil {
				m.Owner = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pipe", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pipe = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthAdver
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Tags == nil {
				m.Tags = make(map[string]string)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAdver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var stringLenmapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAdver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLenmapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLenmapvalue := int(stringLenmapvalue)
				if intStringLenmapvalue < 0 {
					return ErrInvalidLengthAdver
				}
				postStringIndexmapvalue := iNdEx + intStringLenmapvalue
				if postStringIndexmapvalue > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := string(dAtA[iNdEx:postStringIndexmapvalue])
				iNdEx = postStringIndexmapvalue
				m.Tags[mapkey] = mapvalue
			} else {
				var mapvalue string
				m.Tags[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthAdver
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Resources == nil {
				m.Resources = make(map[string]string)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAdver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var stringLenmapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAdver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLenmapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLenmapvalue := int(stringLenmapvalue)
				if intStringLenmapvalue < 0 {
					return ErrInvalidLengthAdver
				}
				postStringIndexmapvalue := iNdEx + intStringLenmapvalue
				if postStringIndexmapvalue > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := string(dAtA[iNdEx:postStringIndexmapvalue])
				iNdEx = postStringIndexmapvalue
				m.Resources[mapkey] = mapvalue
			} else {
				var mapvalue string
				m.Resources[mapkey] = mapvalue
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdvertisementUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdvertisementUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdvertisementUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewAdvers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewAdvers = append(m.NewAdvers, &Advertisement{})
			if err := m.NewAdvers[len(m.NewAdvers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoveAdvers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoveAdvers = append(m.RemoveAdvers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdvertisementChanges) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdvertisementChanges: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdvertisementChanges: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Changes", wireType)
			}
			m.Changes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Changes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAdver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveAdverRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveAdverRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveAdverRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAdver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdvertisementSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdvertisementSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdvertisementSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Advers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Advers = append(m.Advers, &Advertisement{})
			if err := m.Advers[len(m.Advers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAdver(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAdver
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAdver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAdver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAdver
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAdver
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAdver(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAdver = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAdver   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("github.com/evanphx/mesh/peer/adver.proto", fileDescriptorAdver) }

var fileDescriptorAdver = []byte{
	// 488 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xbf, 0x8e, 0xd3, 0x4c,
	0x14, 0xc5, 0x3d, 0x4e, 0xb2, 0xdf, 0xfa, 0x7e, 0xd9, 0xd5, 0x6a, 0x36, 0x8a, 0x8c, 0x25, 0x86,
	0xc8, 0x34, 0x91, 0x80, 0x04, 0x42, 0x01, 0x42, 0x48, 0xc0, 0x22, 0x0a, 0x0a, 0x28, 0x26, 0x50,
	0x23, 0x27, 0xbe, 0x38, 0x16, 0x64, 0x6c, 0x66, 0xc6, 0x0e, 0xe9, 0x78, 0x04, 0x1e, 0x03, 0x9e,
	0x83, 0x86, 0x72, 0x4b, 0x2a, 0x44, 0x4c, 0x43, 0xb9, 0x35, 0x15, 0xca, 0xd8, 0x61, 0xb1, 0x64,
	0x09, 0xd1, 0xdd, 0x3f, 0xe7, 0x77, 0x7c, 0x8f, 0x2d, 0xc3, 0x30, 0x8a, 0xf5, 0x22, 0x9b, 0x8d,
	0xe6, 0xc9, 0x72, 0x8c, 0x79, 0x20, 0xd2, 0xc5, 0xdb, 0xf1, 0x12, 0xd5, 0x62, 0x9c, 0x22, 0xca,
	0x71, 0x10, 0xe6, 0x28, 0x47, 0xa9, 0x4c, 0x74, 0x42, 0xdb, 0xdb, 0x89, 0x77, 0xed, 0x0f, 0x7d,
	0x94, 0x44, 0xc9, 0xd8, 0x2c, 0x67, 0xd9, 0x4b, 0xd3, 0x99, 0xc6, 0x54, 0x25, 0xe4, 0x7f, 0xb2,
	0xe1, 0xe0, 0xc1, 0xd6, 0x44, 0xc7, 0x0a, 0x97, 0x28, 0x34, 0x3d, 0x04, 0x3b, 0x0e, 0x5d, 0x32,
	0x20, 0x43, 0x87, 0xdb, 0x71, 0x48, 0x7d, 0xe8, 0x24, 0x2b, 0x81, 0xd2, 0xb5, 0x07, 0x64, 0xd8,
	0x3d, 0xe9, 0xfe, 0xfc, 0x7a, 0x69, 0xff, 0x71, 0x88, 0x42, 0xc7, 0x7a, 0xcd, 0xcb, 0x15, 0xa5,
	0xd0, 0x4e, 0xe3, 0x14, 0xdd, 0x96, 0xa1, 0x4c, 0x4d, 0x6f, 0x40, 0x5b, 0x07, 0x91, 0x72, 0xdb,
	0x83, 0xd6, 0xf0, 0xff, 0xc9, 0xc5, 0xd1, 0xf6, 0xba, 0x51, 0xed, 0x51, 0xa3, 0x67, 0x41, 0xa4,
	0x1e, 0x09, 0x2d, 0xd7, 0xdc, 0x48, 0xe9, 0x7d, 0x70, 0x24, 0xaa, 0x24, 0x93, 0x73, 0x54, 0x6e,
	0xc7, 0x70, 0x7e, 0x13, 0xc7, 0x77, 0xa2, 0x12, 0x3e, 0x87, 0xbc, 0x5b, 0xe0, 0xfc, 0x36, 0xa5,
	0x47, 0xd0, 0x7a, 0x85, 0xeb, 0x2a, 0xca, 0xb6, 0xa4, 0x3d, 0xe8, 0xe4, 0xc1, 0xeb, 0x0c, 0x4d,
	0x16, 0x87, 0x97, 0xcd, 0x1d, 0xfb, 0x36, 0xf1, 0xee, 0xc2, 0x61, 0xdd, 0xf5, 0x5f, 0x68, 0x5f,
	0xc0, 0x71, 0xed, 0xc2, 0xe7, 0x69, 0x18, 0x68, 0xa4, 0x13, 0x00, 0x81, 0xab, 0x17, 0xe6, 0x23,
	0x29, 0x97, 0x98, 0x40, 0xc7, 0x0d, 0x81, 0xb8, 0x23, 0x70, 0x65, 0x26, 0x8a, 0x5e, 0x86, 0x03,
	0x89, 0xcb, 0x24, 0xc7, 0x1d, 0x66, 0x0f, 0x5a, 0x43, 0x87, 0x77, 0xcb, 0x61, 0x29, 0xf2, 0xaf,
	0x43, 0xaf, 0x66, 0xf0, 0x70, 0x11, 0x88, 0x08, 0x15, 0x75, 0xe1, 0xbf, 0x79, 0x59, 0x9a, 0xbb,
	0x3b, 0x7c, 0xd7, 0xfa, 0x7d, 0xe8, 0x71, 0xd4, 0x32, 0xc6, 0xca, 0x83, 0xe3, 0x9b, 0x0c, 0x95,
	0xf6, 0xef, 0xc1, 0x51, 0xcd, 0x69, 0x8a, 0x9a, 0x5e, 0x81, 0xbd, 0xbf, 0x9f, 0x5c, 0x49, 0x26,
	0x1f, 0x09, 0xec, 0x4f, 0x51, 0xe6, 0xf1, 0x1c, 0x15, 0x7d, 0x02, 0x74, 0xba, 0x16, 0xf3, 0x9a,
	0x52, 0xd1, 0x0b, 0x0d, 0x7c, 0xf9, 0x86, 0x3c, 0xaf, 0x61, 0x55, 0x85, 0xf1, 0x2d, 0xfa, 0x14,
	0xfa, 0xb5, 0xa3, 0xcf, 0x2d, 0x2b, 0xae, 0x29, 0x92, 0xd7, 0x6f, 0xf0, 0x9c, 0xa2, 0xf6, 0xad,
	0x93, 0xab, 0xa7, 0x1b, 0x66, 0x7d, 0xd9, 0x30, 0xeb, 0x6c, 0xc3, 0xc8, 0xbb, 0x82, 0x91, 0x0f,
	0x05, 0x23, 0x9f, 0x0b, 0x46, 0x4e, 0x0b, 0x46, 0xbe, 0x15, 0x8c, 0xfc, 0x28, 0x98, 0x75, 0x56,
	0x30, 0xf2, 0xfe, 0x3b, 0xb3, 0x66, 0x7b, 0xe6, 0x0f, 0xb9, 0xf9, 0x2b, 0x00, 0x00, 0xff, 0xff,
	0xf8, 0xa1, 0x06, 0x0c, 0x82, 0x03, 0x00, 0x00,
}
